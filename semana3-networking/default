
server {

	# Este servidor va a escuchar en el puerto 80 (el puerto por defecto de HTTP)
	listen 80 default_server;
	listen [::]:80 default_server;

	# Definimos que en /var/www/html van a estar todos los archivos estáticos (HTML, CSS, JavaScript, imágenes...)
	root /var/www/html;

	# Este es el HTML inicial, al que se accede automáticamente al entrar a http://0.0.0.0
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	# Definimos que, si no encuentra un cierto archivo, se va a devolver un error 404.
	location / {
		try_files $uri $uri/ =404;
	}

	# Vamos a devolver un error 503 cuando accedamos a http://0.0.0.0/error
	# Esto lo podemos ver desde el navegador o con Postman/HTTPie/cURL (con HTTPie sería: "http http://0.0.0.0/error")
	location /error {
		return 503;
	}

	# Vamos a devolver un JSON y un código 200 al llamar a http://0.0.0.0/api_json
	# Esto lo podemos ver desde el navegador o con Postman/HTTPie/cURL (con HTTPie sería: "http http://0.0.0.0/api_json")
	location /api_json {
		return 200 '{"nombre":"eliana", "ciudad":"pamplona"}';
	}

	# Vamos a devolver un HTML y un código 200 al llamar a http://0.0.0.0/api_html
	# Para devolver un HTML desde un "location", hay que añadir la configuración "Content-type:text/html"
	# Esto lo podemos ver desde el navegador o con Postman/HTTPie/cURL (con HTTPie sería: "http http://0.0.0.0/api_html")
	location /api_html {
		add_header Content-type text/html;
		return 200 'Esto lo daremos con Iker (OK)';
	}

	# El "location" también sirve para otras peticiones, no solo para GET
	# En este caso vamos a devolver un JSON y un código 200 si se ha hecho un POST, pero devolver un error 503 si se usa otro método
	# Para hacer esto, usamos los "if" de Nginx, y comprobamos el objeto $request_method, que nos devuelve el método de la petición
	# Esto lo podemos ver desde el navegador o con Postman/HTTPie/cURL, para ver cómo devolvemos un 200 al usar un POST o un 503 en el resto de casos
	# (con HTTPie sería: "http POST http://0.0.0.0/prueba_post")
	location /prueba_post {
		if ($request_method = POST) {
			return 200 '{"codigo":"1", "mensaje":"Es un POST"}';
		}
		return 503;
	}

	# También podemos devolver una cabecera inventada por nosotros, y la podemos ver con HTTPie por ejemplo ("http http://0.0.0.0/cabecera")
	# Además, en este caso devolvemos un 201 en vez de un 200
	location /cabecera {
		add_header Cabezon mucho;
		return 201;
	}

	# Ahora vamos a hacer una redirección, para eso usamos la función "rewrite" de Nginx
	# En este caso vamos a devolver un 302 (redirección temporal) y hacer una redirección a https://google.com
	# Si vemos la llamada con HTTPie ("http http://0.0.0.0/redireccion") vemos que la nueva URL viene en la cabecera "location"
	rewrite /redireccion https://google.com redirect;
	rewrite /videos https://youtube.com redirect;
	rewrite /musica https://open.spotify.com/intl-es/ redirect;
	rewrite /fotos https://instagram.com/ redirect;

	# También podemos enviar parámetros en la URL
	# En este caso, vamos a hacer que, si se envía un parámetro llamado "nombre", devolvemos un 200, en caso contrario devolvemos un 400
	# Para esto usamos nuevamente un "if" y comprobamos el objeto "arg_nombre" para ver si viene ese parámetro
	# Veremos que solo devolveremos un 200 si llamamos a la URL http://0.0.0.0/parametro?nombre=cualquiercosa
	# (con HTTPie sería: "http http://0.0.0.0/parametro?nombre=cualquiercosa")
	location /parametro {
		if ($arg_nombre) {
			return 200 '{"codigo":"2", "mensaje":"Bien, me has enviado el nombre"}';
		}
		return 400;
	}
}


# Levantamos un nuevo servidor, pero esta vez en el puerto 1777 (en vez de en el puerto 80). Podemos acceder a él en http://0.0.0.0:1777
server {
	listen 1777;

	# Este es el HTML inicial, al que se accede automáticamente al entrar a http:1777//0.0.0.0
	index index.html index.htm index.nginx-debian.html;

	# Vamos a meter una autenticación Basic (usuario + contraseña), y para ello hay que instalar ese paquete: "sudo apt install apache2-utils"
	# Para crear un usuario y contraseña, hay que ejecutar "sudo htpasswd -c /etc/nginx/.htpasswd usuario1"
	# Para añadir usuarios: "sudo htpasswd /etc/nginx/.htpasswd usuario2"
	auth_basic "Contenido restringido";
	auth_basic_user_file /etc/nginx/.htpasswd;

	# Volvemos a poner que se sirvan los archivos de /var/www/html y que, si no se encuentra el archivo, se devuelva un error 403
	root /var/www/html;
	location / {
		try_files $uri $uri/ =403;
	}
}


# Levantamos un nuevo servidor, pero esta vez con HTTPS y en el puerto 443 (el puerto por defecto de HTTPS
# # Podremos acceder a él en https://0.0.0.0 (o lo que es lo mismo https://0.0.0.0:443)
server {
	listen              443;

	# Este es el HTML inicial, al que se accede automáticamente al entrar a https://0.0.0.0
	index index.html index.htm index.nginx-debian.html;

	# Activamos la capa de SSL
	ssl                 on;
	server_name         0.0.0.0;

	# Especificamos dónde ponemos la clave privada y el certificado público
	ssl_certificate     /etc/nginx/certs/certificado1.pem;
	ssl_certificate_key /etc/nginx/certs/clave1.pem;

	# Especificamos otros parámetro de SSL
	ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers         HIGH:!aNULL:!MD5;

	# Volvemos a poner que se sirvan los archivos de /var/www/html y que, si no se encuentra el archivo, se devuelva un error 404
	root /var/www/html;
	location / {
		try_files $uri $uri/ =404;
	}
}
